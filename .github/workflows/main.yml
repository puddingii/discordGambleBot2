name: CI/CD Docker

# 트리거를 수행할 브랜치를 지정합니다.
on:
  push:
    branches: [master]

# 환경설정
env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/discordgamblebot
  VERSION: ${{ github.sha }}
  NAME: go_cicd
  VOLUME_LOG: bot-log

jobs:
  # 빌드 Job
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # github repository에서 checkout
      - uses: actions/checkout@v3
      # docker build 수행
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # GitHub 컨테이너 레지스트리에 로그인 후 빌드 & 푸시
      - name: Login to ghcr
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest
  # 배포 Job
  deploy:
    needs: build # build 후에 실행되도록 정의
    name: Deploy
    runs-on: [self-hosted, label-go] # AWS ./configure에서 사용할 label명
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Docker Check Existed Container # 기존 Container 확인
        id: docker-container-check-result
        run: |
          echo "IS_EXISTED=$(docker container ls | grep ${{ env.NAME }})" >> $GITHUB_OUTPUT

      - name: Docker Remove Existed Container # 기존 Container가 있는 경우 제거
        if: ${{ contains(steps.docker-container-check-result.outputs.IS_EXISTED, env.NAME) == true }}
        run: |
          docker stop ${{ env.NAME }}
          docker rm ${{ env.NAME }}

      - name: Docker Check Existed Image # 기존 Image 확인
        id: docker-image-check-result
        run: |
          echo "IS_EXISTED=$(docker image ls | grep ${{ env.DOCKER_IMAGE }})" >> $GITHUB_OUTPUT

      - name: Docker Remove Existed Image # 기존 Image가 있는 경우 제거
        if: ${{ contains(steps.docker-image-check-result.outputs.IS_EXISTED, env.DOCKER_IMAGE) == true }}
        run: |
          docker rmi ${{ env.DOCKER_IMAGE }}:latest

      - name: Docker Volume Check
        id: docker-volume-check-result
        run: |
          echo "IS_EXISTED=$(docker volume ls | grep ${{ env.VOLUME_LOG }})" >> $GITHUB_OUTPUT

      - name: Create Volume
        if: ${{ contains(steps.docker-volume-check-result.outputs.IS_EXISTED, env.VOLUME_LOG) != true }}
        run: docker volume create ${{ env.VOLUME_LOG }}

      # 3300 -> 80 포트로 수행하도록 지정
      - name: Docker run
        run: |
          docker run -d \
          --env BOT_TOKEN=${{ secrets.BOT_TOKEN }} \
          --env CLIENT_ID=${{ secrets.CLIENT_ID }} \
          --env GUILD_ID=${{ secrets.GUILD_ID }} \
          --env MONGO_ID=${{ secrets.MONGO_ID }} \
          --env MONGO_PW=${{ secrets.MONGO_PW }} \
          --env ADMIN_ID=${{ secrets.ADMIN_ID }} \
          --env ADMIN_PW=${{ secrets.ADMIN_PW }} \
          --env STOCK_UPDATE_TIME=${{ secrets.STOCK_UPDATE_TIME }} \
          --env GAMBLE_UPDATE_TIME=${{ secrets.GAMBLE_UPDATE_TIME }} \
          --env EXPRESS_PORT=${{ secrets.EXPRESS_PORT }} \
          --env SESSION_KEY=${{ secrets.SESSION_KEY }} \
          --env PASSWORD_HASH_ROUND=${{ secrets.PASSWORD_HASH_ROUND }} \
          --env CORS_LIST=${{ secrets.CORS_LIST }} \
          -v ${{ env.VOLUME_LOG }}:/usr/app/log \
          -p ${{ secrets.DOCKER_GAMBLEBOT_PORT }}:${{ secrets.EXPRESS_PORT }} --name go_cicd --restart always ${{ env.DOCKER_IMAGE }}:latest
